// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma adapter next-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// prisma adapter next-auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  image          String?
  emailVerified  DateTime?  @map("email_verified")
  publishedIcons Int        @default(0)
  role           Role       @default(USER)
  lastLogin      DateTime   @default(now())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  BaseIcons      BaseIcon[]
  Icon           Icon[]
  // next auth 
  accounts       Account[]
  sessions       Session[]
}

enum Role {
  USER
  ADMIN
}

// Change this to singular
model BaseIcon {
  id        String   @id @default(cuid())
  name      String
  iconUrl   String
  paltform  Paltform @default(OTHER)
  likes     Int      @default(0)
  downloads Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  approved  Boolean  @default(false)
}

model Icon {
  id        String   @id @default(cuid())
  name      String
  icoURL    String
  pngURL    String
  likes     Int
  downloads Int
  platform  Paltform @default(OTHER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  public    Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum Paltform {
  WINDOWS
  MACOS
  OTHER
}

model BugReport {
  id        String          @id @default(cuid())
  email     String
  message   String
  name      String
  fixed     Boolean         @default(false)
  status    BugReportStatus @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum BugReportStatus {
  PENDING
  WORKING
  FIXED
}
